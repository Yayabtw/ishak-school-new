// Test End-to-End basique avec Playwright (ou Cypress)
// Ce fichier est pr√©par√© pour l'ajout futur de vrais tests E2E

import { test, expect } from '@playwright/test'

test.describe('Ishak\'School - Workflow Principal', () => {
  test.beforeEach(async ({ page }) => {
    // Aller √† la page d'accueil
    await page.goto('http://localhost')
  })

  test('devrait charger la page d\'accueil correctement', async ({ page }) => {
    // V√©rifier le titre
    await expect(page).toHaveTitle(/Ishak'School/)
    
    // V√©rifier la pr√©sence du header
    await expect(page.locator('header')).toBeVisible()
    await expect(page.locator('text=Ishak\'School')).toBeVisible()
  })

  test('devrait afficher le s√©lecteur de fonctions', async ({ page }) => {
    // V√©rifier la pr√©sence du s√©lecteur
    await expect(page.locator('text=S√©lectionnez une fonctionnalit√©')).toBeVisible()
    
    // Cliquer pour ouvrir le dropdown
    await page.click('button:has-text("Choisir une action")')
    
    // V√©rifier les options
    await expect(page.locator('text=üë®‚Äçüè´ Enseignants')).toBeVisible()
    await expect(page.locator('text=üéì √âtudiants')).toBeVisible()
  })

  test('devrait permettre de lister les enseignants', async ({ page }) => {
    // S√©lectionner la fonction "Lister les enseignants"
    await page.click('button:has-text("Choisir une action")')
    await page.click('text=Lister les enseignants')
    
    // V√©rifier que le tableau appara√Æt
    await expect(page.locator('table')).toBeVisible()
    await expect(page.locator('th:has-text("Nom complet")')).toBeVisible()
    await expect(page.locator('th:has-text("Email")')).toBeVisible()
    await expect(page.locator('th:has-text("Sp√©cialit√©")')).toBeVisible()
  })

  test('devrait permettre de rechercher dans les donn√©es', async ({ page }) => {
    // S√©lectionner la fonction "Lister les enseignants"
    await page.click('button:has-text("Choisir une action")')
    await page.click('text=Lister les enseignants')
    
    // Utiliser la barre de recherche
    await page.fill('input[placeholder*="Rechercher"]', 'Jean')
    
    // V√©rifier que les r√©sultats sont filtr√©s
    await expect(page.locator('table tbody tr')).toHaveCount(1, { timeout: 5000 })
  })

  test('devrait permettre de cr√©er un nouvel enseignant', async ({ page }) => {
    // S√©lectionner la fonction "Cr√©er un enseignant"
    await page.click('button:has-text("Choisir une action")')
    await page.click('text=Cr√©er un enseignant')
    
    // V√©rifier que le formulaire appara√Æt
    await expect(page.locator('form')).toBeVisible()
    await expect(page.locator('input[name="firstName"]')).toBeVisible()
    await expect(page.locator('input[name="lastName"]')).toBeVisible()
    await expect(page.locator('input[name="email"]')).toBeVisible()
    
    // Remplir le formulaire
    await page.fill('input[name="firstName"]', 'Test')
    await page.fill('input[name="lastName"]', 'Teacher')
    await page.fill('input[name="email"]', 'test.teacher@example.com')
    await page.selectOption('select[name="speciality"]', 'Informatique')
    
    // Soumettre le formulaire
    await page.click('button[type="submit"]')
    
    // V√©rifier le message de succ√®s (toast)
    await expect(page.locator('text=Enseignant cr√©√© avec succ√®s')).toBeVisible({ timeout: 5000 })
  })

  test('devrait afficher les erreurs de validation', async ({ page }) => {
    // S√©lectionner la fonction "Cr√©er un enseignant"
    await page.click('button:has-text("Choisir une action")')
    await page.click('text=Cr√©er un enseignant')
    
    // Essayer de soumettre un formulaire vide
    await page.click('button[type="submit"]')
    
    // V√©rifier les messages d'erreur de validation
    await expect(page.locator('text=Ce champ est requis')).toHaveCount(4, { timeout: 3000 })
  })

  test('devrait √™tre responsive sur mobile', async ({ page }) => {
    // Simuler un √©cran mobile
    await page.setViewportSize({ width: 375, height: 667 })
    
    // V√©rifier que l'interface s'adapte
    await expect(page.locator('header')).toBeVisible()
    
    // Le menu hamburger devrait √™tre visible sur mobile
    await expect(page.locator('button[aria-label="Toggle menu"]')).toBeVisible()
  })

  test('devrait g√©rer les erreurs d\'API gracieusement', async ({ page }) => {
    // Intercepter les requ√™tes API pour simuler des erreurs
    await page.route('**/api/teachers', route => {
      route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({ message: 'Erreur serveur simul√©e' })
      })
    })
    
    // Essayer de charger les enseignants
    await page.click('button:has-text("Choisir une action")')
    await page.click('text=Lister les enseignants')
    
    // V√©rifier le message d'erreur
    await expect(page.locator('text=Erreur de chargement')).toBeVisible({ timeout: 5000 })
  })
})

// Tests de performance basiques
test.describe('Performance', () => {
  test('devrait charger rapidement', async ({ page }) => {
    const startTime = Date.now()
    await page.goto('http://localhost')
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // La page devrait se charger en moins de 3 secondes
    expect(loadTime).toBeLessThan(3000)
  })
})

// Tests d'accessibilit√© basiques
test.describe('Accessibilit√©', () => {
  test('devrait avoir une bonne structure s√©mantique', async ({ page }) => {
    await page.goto('http://localhost')
    
    // V√©rifier la pr√©sence des √©l√©ments s√©mantiques
    await expect(page.locator('header')).toBeVisible()
    await expect(page.locator('main')).toBeVisible()
    
    // V√©rifier les attributs ARIA
    await expect(page.locator('button[aria-label]')).toHaveCount(1) // Menu toggle
  })
}) 